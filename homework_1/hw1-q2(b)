{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max 3 z1 - z2\n",
      "Subject to\n",
      " -z1 + 6 z2 - z3 + z4 ≥ -3\n",
      " 7 z2 + z4 = 5\n",
      " z3 + z4 ≤ 2\n",
      " z1 free\n",
      " -1 ≤ z2 ≤ 5\n",
      " -1 ≤ z3 ≤ 5\n",
      " -2 ≤ z4 ≤ 2\n",
      "\n",
      "Optimal\n",
      "\n",
      "z1 = 8.571428571428571\n",
      "z2 = 0.42857142857142855\n",
      "z3 = -1.0\n",
      "z4 = 2.0\n",
      "objective = 25.28571428571429\n"
     ]
    }
   ],
   "source": [
    "using JuMP\n",
    "\n",
    "m = Model()\n",
    "\n",
    "#Variables z1, z2, z3, z4\n",
    "@defVar(m, z1)\n",
    "@defVar(m, -1 <= z2 <= 5)\n",
    "@defVar(m, -1 <= z3 <= 5)\n",
    "@defVar(m, -2 <= z4 <= 2)\n",
    "\n",
    "#Constraints\n",
    "@addConstraint(m, - z1 + 6*z2 -z3 + z4 >= -3)\n",
    "@addConstraint(m, 7*z2 + z4 == 5)\n",
    "@addConstraint(m, z3 + z4 <= 2)\n",
    "\n",
    "#Objective \n",
    "@setObjective(m, Max, 3*z1 - z2)\n",
    "\n",
    "#Display results\n",
    "status = solve(m)\n",
    "\n",
    "println(m)\n",
    "println(status)\n",
    "println()\n",
    "println(\"z1 = \", getValue(z1) )\n",
    "println(\"z2 = \", getValue(z2) )\n",
    "println(\"z3 = \", getValue(z3) )\n",
    "println(\"z4 = \", getValue(z4) )\n",
    "\n",
    "println(\"objective = \", getObjectiveValue(m) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 0.4.3",
   "language": "julia",
   "name": "julia-0.4"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "0.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
